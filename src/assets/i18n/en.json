{
    "error": {
        "unknown": "Unknown error",
        "node_connection": "Error connecting to Kong node",
        "title": "Error en la operación - {{extra}}",
        "content": "{{extra}}",
        "field_required": "Field required"
    },
    "success": {
        "new_service": "Service created",
        "new_route": "Route created",
        "new_upstream": "Upstream created",
        "new_consumer": "Consumer created",
        "new_plugin": "Plugin created",
        "delete_service": "Service deleted"
    },
    "text": {
        "id_extra": "ID: {{extra}}",
        "documentation": "Documentation",
        "advanced_fields": "Advanced fields",
        "create": "Create",
        "info": "Information",
        "edit": "Edit",
        "delete": "Delete",
        "cancel": "Cancel",
        "accept": "Accept"
    },
    "dialog": {
        "confirm": {
            "delete_service_title": "Delete service",
            "delete_service": "Do you want to delete this service?"
        }
    },
    "header": {
        "menu": {
            "graph": "Architect",
            "elements": "Elements",
            "plugins": "Plugins",
            "certs": "Certificates",
            "kong_node": "Kong node admin API",
            "kong_node_tooltip": "Type in the URL and port",
            "kong_node_button_tooltip": "Connect",
            "error_node_field": "Must be a valid url. Format: http(s)://<admin-api>:<port>"
        },
        "node_connected": "Connected to node {{extra}}"
    },
    "footer": {
        "about": "About"
    },
    "landing": {
        "title": "Type here the address and port of the administration API of a Kong node, and click on the arrow to connect",
        "subtitle": "If you have connected with a node previously you will see it in the selector"
    },
    "architect": {
        "global_actions": "Global actions",
        "local_actions_service": "Actions on service",
        "local_actions_route": "Actions on route",
        "local_actions_upstream": "Actions on upstream",
        "local_actions_consumer": "Actions on consumer",
        "add_service": "Add Service",
        "add_route": "Add Route",
        "add_upstream": "Add Upstream",
        "add_consumer": "Add Consumer",
        "center_network": "Adjust graph to fit all nodes"
    },
    "service": {
        "dialog": {
            "create": "Create a new service",
            "name": "Name for the service",
            "name_example": "my-service",
            "url": "Complete URL",
            "url_hint": "Must include protocol, host, port and path if it´s needed",
            "url_example": "https://example.com:80/api",
            "complete": "Different fields for each value",
            "protocol": "Protocol",
            "host": "Host or IP",
            "host_example": "example.com",
            "port": "Port",
            "port_example": "80",
            "path": "Path",
            "path_example": "/api_rest",
            "retries": "Retries",
            "connect_timeout": "Connect timeout",
            "connect_tooltip": "Timeout for connection to the upstream server",
            "write_timeout": "Write timeout",
            "read_timeout": "Read timeout",
            "write_tooltip": "Timeout between two successive write operations for transmitting a request to the upstream server",
            "read_tooltip": "Timeout between two successive read operations for transmitting a request to the upstream server",
            "certificate": "Certificado de cliente",
            "certificate_example": "4e3ad2e4-0bc4-4638-8e34-c84a417ba39b",
            "certificate_tooltip": "Certificate (UUID) to be used as client certificate while TLS handshaking to the upstream server",
            "ca_certificates": "Certificados de CA",
            "ca_certificates_example": "4e3ad2e4-0bc4-4638-8e34-c84a417ba39b\n51e77dc2-8f3e-4afa-9d0e-0e3bbbcfd515",
            "ca_certificates_tooltip": "Array of CA Certificate object UUIDs that are used to build the trust store while verifying upstream server’s TLS certificate. If set to null when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).",
            "tls_verify": "Verify TLS",
            "tls_verify_tooltip": "Whether to enable verification of upstream server TLS certificate. If left empty, then the Nginx default is respected.",
            "tls_verify_depth": "TLS depth of chain",
            "tls_verify_depth_tooltip": "Maximum depth of chain while verifying Upstream server’s TLS certificate. If left empty, then the Nginx default is respected.",
            "milliseconds_hint": "Milliseconds",
            "tags": "Tags",
            "tags_hint": "Write a tag and press enter or comma",
            "error": {
                "name_pattern": "Allowed alphanumeric characters and - _ . ~",
                "port_min_max": "Number between 0 and 65535",
                "path_pattern": "Must start with /",
                "retries_min_max": "Number between 0 and 20",
                "timeout_min_max": "Number between 0 and 3600000"
            }
        }
    }
}
