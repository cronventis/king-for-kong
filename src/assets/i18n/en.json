{
    "error": {
        "unknown": "Unknown error",
        "node_connection": "Error connecting to Kong node",
        "title": "Error en la operación - {{extra}}",
        "content": "{{extra}}",
        "field_required": "Field required"
    },
    "success": {
        "new_service": "Service created",
        "new_route": "Route created",
        "new_upstream": "Upstream created",
        "new_consumer": "Consumer created",
        "new_plugin": "Plugin created",
        "update_service": "Service updated",
        "update_route": "Route updated",
        "update_upstream": "Upstream updated",
        "update_consumer": "Consumer updated",
        "delete_service": "Service deleted",
        "delete_route": "Route deleted",
        "delete_upstream": "Upstream deleted",
        "delete_consumer": "Consumer deleted"
    },
    "text": {
        "id_extra": "ID: {{extra}}",
        "kong_node": "Kong node",
        "documentation": "Documentation",
        "advanced_fields": "Advanced fields",
        "create": "Create",
        "info": "Information",
        "edit": "Edit",
        "delete": "Delete",
        "cancel": "Cancel",
        "accept": "Accept",
        "name": "Name",
        "id": "ID",
        "created_at": "Created at",
        "updated_at": "Updated at",
        "tags": "Tags",
        "true": "Sí",
        "false": "No"
    },
    "pagination": {
        "itemsPerPageLabel": "Items per page:",
        "nextPageLabel": "Next page",
        "previousPageLabel": "Previous page",
        "firstPageLabel": "First page",
        "lastPageLabel": "Last page",
        "ofLabel": " of "
    },
    "dialog": {
        "confirm": {
            "delete_service_title": "Delete service",
            "delete_service": "Do you want to delete this service?"
        },
        "copy_clipboard": "Download in JSON"
    },
    "header": {
        "menu": {
            "graph": "Architect",
            "elements": "Elements",
            "plugins": "Plugins",
            "certs": "Certificates",
            "services": "Services",
            "routes": "Routes",
            "upstreams": "Upstreams",
            "consumers": "Consumers",
            "certificates": "Certificados",
            "cacerts": "Certificados de CA",
            "snis": "SNIs",
            "kong_node": "Kong node admin API",
            "kong_node_tooltip": "Type in the URL and port",
            "kong_node_button_tooltip": "Connect",
            "error_node_field": "Must be a valid url. Format: http(s)://<admin-api>:<port>"
        },
        "node_connected": "Connected to node {{extra}}"
    },
    "footer": {
        "about": "About"
    },
    "landing": {
        "title": "Type here the address and port of the administration API of a Kong node, and click on the arrow to connect",
        "subtitle": "If you have connected with a node previously you will see it in the selector"
    },
    "information": {
        "node": "Kong node information",
        "database": "Database",
        "db": {
            "name": "Name",
            "host": "Host",
            "port": "Port",
            "username": "Username",
            "timeout": "Timeout",
            "ssl": "SSL",
            "ssl_verify": "SSL verify"
        },
        "server": "Connections",
        "plugins": "Available and in use plugins",
        "available": "Available",
        "used": "In use",
        "download_info": "Download information JSON",
        "download_status": "Download status JSON",
        "version": "Version",
        "admin_listen": "Administration API",
        "admin_ssl": "SSL administration API",
        "proxy_listen": "Gateway proxy API",
        "proxy_ssl": "SSL gateway proxy API",
        "cluster_control_plane": "Cluster control plane",
        "anonymous_reports": "Send anonymous reports",
        "files": {
            "title": "Files",
            "proxy_access_log": "Proxy: access",
            "proxy_error_log": "Proxy: error",
            "nginx_acc_logs": "Nginx: access",
            "nginx_err_logs": "Nginx: error",
            "admin_acc_logs": "Admin: access",
            "admin_access_log": "Admin: access",
            "admin_error_log": "Admin: error",
            "nginx_conf": "Nginx: configuration",
            "kong_env": "Kong: environment"
        },
        "chart": {
            "connections_accepted": "Accepted",
            "connections_active": "Active",
            "connections_waiting": "Waiting",
            "connections_writing": "Writing",
            "connections_reading": "Reading",
            "connections_handled": "Handled",
            "total_requests": "Total requests"
        }
    },
    "architect": {
        "global_actions": "Global actions",
        "local_actions_service": "Actions on service",
        "local_actions_route": "Actions on route",
        "local_actions_upstream": "Actions on upstream",
        "local_actions_consumer": "Actions on consumer",
        "center_network": "Adjust graph to fit all nodes"
    },
    "service": {
        "label": "Service",
        "add": "Add Service",
        "dialog": {
            "create": "Create a new Service",
            "edit": "Edit Service",
            "info": "Service`s information",
            "name": "Name for the Service",
            "name_example": "my-service",
            "url": "Complete URL",
            "url_hint": "Must include protocol, host, port and path if it´s needed",
            "url_example": "https://example.com:80/api",
            "complete": "Different fields for each value",
            "protocol": "Protocol",
            "host": "Host or IP",
            "host_example": "example.com",
            "port": "Port",
            "port_example": "80",
            "path": "Path",
            "path_example": "/api_rest",
            "retries": "Retries",
            "connect_timeout": "Connect timeout (ms)",
            "connect_tooltip": "Timeout for connection to the upstream server",
            "write_timeout": "Write timeout (ms)",
            "write_tooltip": "Timeout between two successive write operations for transmitting a request to the upstream server",
            "read_timeout": "Read timeout (ms)",
            "read_tooltip": "Timeout between two successive read operations for transmitting a request to the upstream server",
            "certificate": "Certificado de cliente",
            "certificate_example": "4e3ad2e4-0bc4-4638-8e34-c84a417ba39b",
            "certificate_tooltip": "Certificate (UUID) to be used as client certificate while TLS handshaking to the upstream server",
            "ca_certificates": "Certificados de CA",
            "ca_certificates_example": "4e3ad2e4-0bc4-4638-8e34-c84a417ba39b\n51e77dc2-8f3e-4afa-9d0e-0e3bbbcfd515",
            "ca_certificates_tooltip": "Array of CA Certificate object UUIDs that are used to build the trust store while verifying upstream server’s TLS certificate. If set to null when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).",
            "tls_verify": "Verify TLS",
            "tls_verify_tooltip": "Whether to enable verification of upstream server TLS certificate. If left empty, then the Nginx default is respected.",
            "tls_verify_depth": "TLS depth of chain",
            "tls_verify_depth_tooltip": "Maximum depth of chain while verifying Upstream server’s TLS certificate. If left empty, then the Nginx default is respected.",
            "milliseconds_hint": "Milliseconds",
            "tags": "Tags",
            "tags_hint": "Write a tag and press enter or comma",
            "error": {
                "name_pattern": "Allowed alphanumeric characters and - _ . ~",
                "port_min_max": "Number between 0 and 65535",
                "path_pattern": "Must start with /",
                "retries_min_max": "Number between 0 and 20",
                "timeout_min_max": "Number between 1 and 2147483646",
                "tls_depth_min_max": "Number between 0 and 64",
                "protocol_path_collision": "Selected protocol does not allow any path param, leave it empty",
                "ca_certificate_pattern": "One certificate per line (UIID format)"
            }
        }
    },
    "route": {
        "add": "Add Route",
        "label": "Route",
        "dialog": {
            "create": "Create a new Route",
            "edit": "Edit Route",
            "info": "Route`s information",
            "name": "Name for the Route",
            "name_example": "my-route",
            "protocols": "Protocols",
            "protocols_tooltip": "For http, at least one of methods, hosts, headers or paths.\nFor https, at least one of methods, hosts, headers, paths or snis.\nFor tcp and udp, at least one of sources or destinations.\nFor tls, at least one of sources, destinations or snis.\nFor grpc, at least one of hosts, headers or paths.\nFor grpcs, at least one of hosts, headers, paths or snis.",
            "hosts": "Hosts",
            "hosts_example": "example.com",
            "hosts_tooltip": "A list of hosts that match this Route. Allows one wildcard at the beggining or the end",
            "hosts_hint": "Write a value and press enter or coma",
            "path": "Paths",
            "path_example": "/api_rest",
            "paths_tooltip": "A list of paths that match this Route",
            "methods": "Methods",
            "methods_tooltip": "A list of HTTP methods that match this Route",
            "redirect": "HTTP redirect status code",
            "redirect_tooltip": "The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is HTTP instead of HTTPS",
            "regex_priority": "RegExp priority",
            "regex_tooltip": "A number used to choose which route resolves a given request when several routes match it using regexes simultaneously",
            "path_handling": "Path handling",
            "path_handling_hint": "Read the documentation",
            "strip_path": "Strip path",
            "strip_path_tooltip": "When matching a Route via one of the paths, strip the matching prefix from the upstream request URL",
            "preserve_host": "Preseve host",
            "preserve_host_tooltip": "When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers",
            "request_buffering": "Request buffering",
            "response_buffering": "Response buffering",
            "snis": "SNIs",
            "snis_tooltip": "A list of SNIs that match this Route when using stream routing",
            "headers": "Headers",
            "header": "Header",
            "header_value": "Value/s",
            "header_value_hint": "Comma separated values",
            "error": {
                "name_pattern": "Allowed alphanumeric characters and - _ . ~",
                "port_min_max": "Number between 0 and 65535",
                "regex_min_max": "Number between 0 and 999999",
                "path_pattern": "Must start with /",
                "final_validation": "There are fields that must be filled. Read the Protocols field help for more information",
                "protocols_exclusions": "These sets are mutually exclusive: [http,https] [tcp,tls,udp] [grpc,grpcs]"
            }
        }
    },
    "upstream": {
        "add": "Add Upstream"
    },
    "consumer": {
        "add": "Add Consumer"
    },
    "plugin": {
        "add": "Add Plugin"
    },
    "element": {
        "text_search": "search text",
        "no_data": "No data matching the filter",
        "actions": "Actions",
        "reload": "Reload data",
        "ssl": "Certificates"
    }
}
